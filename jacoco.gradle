apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}

def limits = [
        'instruction': 70,
        'branch'     : 70,
        'line'       : 70,
        'complexity' : 70,
        'method'     : 70,
        'class'      : 70
]
project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName
            if (!productFlavorName) {
                sourceName  = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            def testTaskNameCoverage = "${testTaskName}Coverage"
            task "${testTaskNameCoverage}"(type: JacocoReport, dependsOn: "$testTaskName") {

                reports {
                    xml.enabled = true
                    html.enabled = true
                    csv.enabled = false
                }
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                def fileFilter = fileTree(
                        dir: "${project.buildDir}/intermediates/javac/${buildTypeName}",
                        excludes: [
                                '**/R.class',
                                '**/R$*.class',
                                '**/*$ViewInjector*.*',
                                '**/*$ViewBinder*.*',
                                '**/BuildConfig.*',
                                '**/Manifest*.*',
                                '**/R.class',
                                '**/R$*.class',
                                '**/BuildConfig.*',
                                'android/**/*.*'

                        ],
                        includes: ['**/viewmodel/*viewModel.class']
                )

                def javaClass = fileTree(
                        dir: "${project.buildDir}/intermediates/javac/${buildTypeName}",
                        excludes: fileFilter,
                        includes: ['**/viewmodel/*ViewModel.class',
                                   '**/usecase/*UseCaseImpl.class',
                                   '**/repository/*Impl.class'
                        ]
                )

                def kotlinClass = fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
                        excludes: fileFilter,
                        includes: ['**/viewmodel/*ViewModel.class',
                                   '**/usecase/*UseCaseImpl.class',
                                   '**/repository/*Impl.class'
                        ]
                )
                classDirectories = javaClass + kotlinClass

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java",
                        "src/main/kotlin",
                        "src/$productFlavorName/kotlin",
                        "src/$buildTypeName/kotlin"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                doLast {
                    def report = file("${jacoco.reportsDir}/${testTaskNameCoverage}/${testTaskNameCoverage}.xml")
                    def parser = new XmlParser()
                    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
                    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
                    def results = parser.parse(report)

                    def percentage = {
                        def covered = it.'@covered' as Double
                        def missed = it.'@missed' as Double
                        ((covered / (covered + missed)) * 100).round(2)
                    }
                    def counters = results.counter
                    def metrics = [:]
                    metrics << [
                            'instruction': percentage(counters.find {
                                it.'@type'.equals('INSTRUCTION')
                                return it
                            }),
                            'branch'     : percentage(counters.find {
                                it.'@type'.equals('BRANCH')
                                return it
                            }),
                            'line'       : percentage(counters.find {
                                it.'@type'.equals('LINE')
                                return it
                            }),
                            'complexity' : percentage(counters.find {
                                it.'@type'.equals('COMPLEXITY')
                                return it
                            }),
                            'method'     : percentage(counters.find {
                                it.'@type'.equals('METHOD')
                                return it
                            }),
                            'class'      : percentage(counters.find {
                                it.'@type'.equals('CLASS')
                                return it
                            })
                    ]


                    def failures = []
                    metrics.each {
                        def limit = limits[it.key]
                        if (it.value < limit) {
                            failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                        }
                        logger.quiet("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                    }

                    if (failures) {
                        logger.quiet("------------------ Code Coverage Failed -----------------------")
                        logger.quiet("---------------------------------------------------------------")
                        throw new GradleException("Code coverage failed")
                    } else {
                        logger.quiet("Passed Code Coverage Checks")
                    }
                }

            }
        }
    }
}